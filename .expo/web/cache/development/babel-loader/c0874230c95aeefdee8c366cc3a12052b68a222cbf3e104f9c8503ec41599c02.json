{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport PrimaryButton from \"../Components/ui/PrimartButton\";\nimport Colors from \"../constants/Colors\";\nimport Title from \"../Components/ui/Title\";\nimport Card from \"../Components/ui/Card\";\nimport InstructionText from \"../Components/ui/InstructionText\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar StartGameScreen = function StartGameScreen(_ref) {\n  var onPickNumber = _ref.onPickNumber;\n  var _useState = useState(\"\"),\n    _useState2 = _slicedToArray(_useState, 2),\n    enteredNumber = _useState2[0],\n    setEnteredNumber = _useState2[1];\n  var numberInputHandler = function numberInputHandler(enteredText) {\n    setEnteredNumber(enteredText);\n  };\n  var resetInputHandler = function resetInputHandler() {\n    setEnteredNumber(\"\");\n  };\n  var confirmInputHandler = function confirmInputHandler() {\n    var chosenNumber = parseInt(enteredNumber);\n    if (isNaN(chosenNumber) || chosenNumber <= 0 || chosenNumber > 99) {\n      Alert.alert(\"invalid Number\", \"Number has to be a Number between 1 - 99\", [{\n        text: \"Okay\",\n        style: \"destructive\",\n        onPress: resetInputHandler\n      }]);\n      return;\n    }\n    onPickNumber(chosenNumber);\n  };\n  return _jsxs(View, {\n    style: styles.rootContainer,\n    children: [_jsx(Title, {\n      children: \"Guess My Number\"\n    }), _jsxs(Card, {\n      children: [_jsx(InstructionText, {\n        style: styles.instructionText,\n        children: \"Enter a Random Number\"\n      }), _jsx(TextInput, {\n        style: styles.numberInput,\n        placeholder: \"Add\",\n        maxLength: 2,\n        keyboardType: \"number-pad\",\n        autoCapitalize: \"none\",\n        autoCorrect: false,\n        onChangeText: numberInputHandler,\n        value: enteredNumber\n      }), _jsxs(View, {\n        style: styles.buttonsContainer,\n        children: [_jsx(View, {\n          style: styles.buttonContainer,\n          children: _jsx(PrimaryButton, {\n            onPress: resetInputHandler,\n            children: \"Reset\"\n          })\n        }), _jsx(View, {\n          style: styles.buttonContainer,\n          children: _jsx(PrimaryButton, {\n            onPress: confirmInputHandler,\n            children: \"Confirm\"\n          })\n        })]\n      })]\n    })]\n  });\n};\nexport default StartGameScreen;\nvar styles = StyleSheet.create({\n  buttonsContainer: {\n    flexDirection: \"row\"\n  },\n  numberInput: {\n    height: 50,\n    borderBottomColor: Colors.accent500,\n    fontSize: 32,\n    borderBottomWidth: 2,\n    color: Colors.accent500,\n    marginVertical: 8,\n    fontWeight: \"bold\",\n    width: 50,\n    textAlign: \"center\"\n  },\n  buttonContainer: {\n    flex: 1\n  },\n  rootContainer: {\n    flex: 1,\n    marginTop: 100,\n    alignItems: 'center'\n  },\n  instructionText: {\n    marginBottom: 12\n  }\n});","map":{"version":3,"names":["React","useState","View","StyleSheet","Text","TextInput","Button","Alert","PrimaryButton","Colors","Title","Card","InstructionText","jsx","_jsx","jsxs","_jsxs","StartGameScreen","_ref","onPickNumber","_useState","_useState2","_slicedToArray","enteredNumber","setEnteredNumber","numberInputHandler","enteredText","resetInputHandler","confirmInputHandler","chosenNumber","parseInt","isNaN","alert","text","style","onPress","styles","rootContainer","children","instructionText","numberInput","placeholder","maxLength","keyboardType","autoCapitalize","autoCorrect","onChangeText","value","buttonsContainer","buttonContainer","create","flexDirection","height","borderBottomColor","accent500","fontSize","borderBottomWidth","color","marginVertical","fontWeight","width","textAlign","flex","marginTop","alignItems","marginBottom"],"sources":["D:/React Native by Max/GuessNum/Screens/StartGameScreen.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport { View, StyleSheet, Text, TextInput, Button, Alert } from \"react-native\";\r\nimport PrimaryButton from \"../Components/ui/PrimartButton\";\r\nimport Colors from \"../constants/Colors\";\r\nimport Title from \"../Components/ui/Title\";\r\nimport Card from \"../Components/ui/Card\";\r\nimport InstructionText from \"../Components/ui/InstructionText\";\r\n\r\nconst StartGameScreen = ({ onPickNumber }) => {\r\n  const [enteredNumber, setEnteredNumber] = useState(\"\");\r\n\r\n  const numberInputHandler = (enteredText) => {\r\n    setEnteredNumber(enteredText);\r\n  };\r\n  const resetInputHandler = () => {\r\n    setEnteredNumber(\"\");\r\n  };\r\n  const confirmInputHandler = () => {\r\n    const chosenNumber = parseInt(enteredNumber);\r\n    if (isNaN(chosenNumber) || chosenNumber <= 0 || chosenNumber > 99) {\r\n      Alert.alert(\r\n        \"invalid Number\",\r\n        \"Number has to be a Number between 1 - 99\",\r\n        [{ text: \"Okay\", style: \"destructive\", onPress: resetInputHandler }]\r\n      );\r\n      return;\r\n    }\r\n    onPickNumber(chosenNumber);\r\n  };\r\n  return ( <View style={styles.rootContainer}>\r\n    <Title>Guess My Number</Title>\r\n    <Card>\r\n    <InstructionText style={styles.instructionText}>Enter a Random Number</InstructionText>\r\n      <TextInput\r\n        style={styles.numberInput}\r\n        placeholder=\"Add\"\r\n        maxLength={2}\r\n        keyboardType=\"number-pad\"\r\n        autoCapitalize=\"none\"\r\n        autoCorrect={false}\r\n        onChangeText={numberInputHandler}\r\n        value={enteredNumber}\r\n      />\r\n      <View style={styles.buttonsContainer}>\r\n        <View style={styles.buttonContainer}>\r\n          <PrimaryButton onPress={resetInputHandler}>Reset</PrimaryButton>\r\n        </View>\r\n        <View style={styles.buttonContainer}>\r\n          <PrimaryButton onPress={confirmInputHandler}>Confirm</PrimaryButton>\r\n        </View>\r\n      </View>\r\n    </Card>\r\n    </View>\r\n \r\n  );\r\n};\r\n\r\nexport default StartGameScreen;\r\n\r\nconst styles = StyleSheet.create({\r\n  \r\n  buttonsContainer: {\r\n    flexDirection: \"row\",\r\n  },\r\n  numberInput: {\r\n    height: 50,\r\n    borderBottomColor: Colors.accent500,\r\n    fontSize: 32,\r\n    borderBottomWidth: 2,\r\n    color: Colors.accent500,\r\n    marginVertical: 8,\r\n    fontWeight: \"bold\",\r\n    width: 50,\r\n    textAlign: \"center\",\r\n  },\r\n  buttonContainer: {\r\n    flex: 1,\r\n  },\r\n  rootContainer:{\r\n    flex : 1 , \r\n    marginTop : 100 , alignItems : 'center'\r\n  },\r\n  instructionText:{\r\nmarginBottom:12 \r\n  }\r\n});\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}