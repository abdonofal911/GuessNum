{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _this = this;\nimport { useState, useEffect } from \"react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport Title from \"../Components/ui/Title\";\nimport NumberContainer from \"../Components/game/NumberContainer\";\nimport PrimaryButton from \"../Components/ui/PrimartButton\";\nimport Card from \"../Components/ui/Card\";\nimport { AntDesign } from \"@expo/vector-icons\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nfunction generateRandomBetween(min, max, exclude) {\n  var rndNum = Math.floor(Math.random() * (max - min)) + min;\n  if (rndNum === exclude) {\n    return generateRandomBetween(min, max, exclude);\n  } else {\n    return rndNum;\n  }\n}\nvar minBoundary = 1;\nvar maxBoundary = 100;\nvar GameScreen = function GameScreen(_ref) {\n  var userNumber = _ref.userNumber,\n    onGameOver = _ref.onGameOver;\n  var initialGuess = generateRandomBetween(minBoundary, maxBoundary, userNumber);\n  var _useState = useState(initialGuess),\n    _useState2 = _slicedToArray(_useState, 2),\n    currentGuess = _useState2[0],\n    setCurrentGuess = _useState2[1];\n  useEffect(function () {\n    if (currentGuess === userNumber) {\n      onGameOver();\n    }\n  }, [currentGuess, userNumber, onGameOver]);\n  var nextGuessHandler = function nextGuessHandler(direction) {\n    if (direction === \"lower\" && currentGuess < userNumber || direction === \"greater\" && currentGuess > userNumber) {\n      Alert.alert(\"Don't Lie !!\", \"You Know this is Wrong ... \", [{\n        text: \"Sorry\",\n        style: \"cancel\"\n      }]);\n      return;\n    }\n    if (direction == \"lower\") {\n      maxBoundary = currentGuess;\n    } else {\n      minBoundary = currentGuess + 1;\n    }\n    var newRndNumber = generateRandomBetween(minBoundary, maxBoundary, currentGuess);\n    setCurrentGuess(newRndNumber);\n  };\n  return _jsxs(View, {\n    style: styles.screen,\n    children: [_jsx(Title, {\n      children: \"Opponent's Guess \"\n    }), _jsx(NumberContainer, {\n      children: currentGuess\n    }), _jsxs(Card, {\n      children: [_jsx(Text, {\n        children: \"Higher or Lower ?\"\n      }), _jsxs(View, {\n        style: styles.buttonsContainer,\n        children: [_jsx(View, {\n          style: styles.buttonContainer,\n          children: _jsx(PrimaryButton, {\n            onPress: nextGuessHandler.bind(_this, \"lower\"),\n            children: _jsx(AntDesign, {\n              name: \"minuscircleo\",\n              size: 24,\n              color: \"black\"\n            })\n          })\n        }), _jsx(View, {\n          style: styles.buttonContainer,\n          children: _jsxs(PrimaryButton, {\n            onPress: nextGuessHandler.bind(_this, \"greater\"),\n            children: [_jsx(AntDesign, {\n              name: \"pluscircleo\",\n              size: 24,\n              color: \"black\"\n            }), \" \"]\n          })\n        })]\n      })]\n    })]\n  });\n};\nexport default GameScreen;\nvar styles = StyleSheet.create({\n  screen: {\n    flex: 1,\n    padding: 24\n  },\n  buttonsContainer: {\n    flexDirection: \"row\"\n  },\n  buttonContainer: {\n    flex: 1\n  }\n});","map":{"version":3,"names":["useState","useEffect","StyleSheet","Text","View","SafeAreaView","Alert","Title","NumberContainer","PrimaryButton","Card","AntDesign","jsx","_jsx","jsxs","_jsxs","generateRandomBetween","min","max","exclude","rndNum","Math","floor","random","minBoundary","maxBoundary","GameScreen","_ref","userNumber","onGameOver","initialGuess","_useState","_useState2","_slicedToArray","currentGuess","setCurrentGuess","nextGuessHandler","direction","alert","text","style","newRndNumber","styles","screen","children","buttonsContainer","buttonContainer","onPress","bind","_this","name","size","color","create","flex","padding","flexDirection"],"sources":["D:/React Native by Max/GuessNum/Screens/GameScreen.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport { StyleSheet, Text, View, SafeAreaView, Alert } from \"react-native\";\r\nimport Title from \"../Components/ui/Title\";\r\nimport NumberContainer from \"../Components/game/NumberContainer\";\r\nimport PrimaryButton from \"../Components/ui/PrimartButton\";\r\nimport Card from \"../Components/ui/Card\";\r\nimport { AntDesign } from \"@expo/vector-icons\";\r\n\r\nfunction generateRandomBetween(min, max, exclude) {\r\n  const rndNum = Math.floor(Math.random() * (max - min)) + min;\r\n\r\n  if (rndNum === exclude) {\r\n    return generateRandomBetween(min, max, exclude);\r\n  } else {\r\n    return rndNum;\r\n  }\r\n}\r\n\r\nlet minBoundary = 1;\r\nlet maxBoundary = 100;\r\n\r\nconst GameScreen = ({ userNumber, onGameOver }) => {\r\n  const initialGuess = generateRandomBetween(\r\n    minBoundary,\r\n    maxBoundary,\r\n    userNumber\r\n  );\r\n  const [currentGuess, setCurrentGuess] = useState(initialGuess);\r\n\r\n  useEffect(() => {\r\n    if (currentGuess === userNumber) {\r\n      onGameOver();\r\n    }\r\n  }, [currentGuess, userNumber, onGameOver]);\r\n\r\n  const nextGuessHandler = (direction) => {\r\n    if (\r\n      (direction === \"lower\" && currentGuess < userNumber) ||\r\n      (direction === \"greater\" && currentGuess > userNumber)\r\n    ) {\r\n      Alert.alert(\"Don't Lie !!\", \"You Know this is Wrong ... \", [\r\n        { text: \"Sorry\", style: \"cancel\" },\r\n      ]);\r\n      return;\r\n    }\r\n    if (direction == \"lower\") {\r\n      maxBoundary = currentGuess;\r\n    } else {\r\n      minBoundary = currentGuess + 1;\r\n    }\r\n\r\n    const newRndNumber = generateRandomBetween(\r\n      minBoundary,\r\n      maxBoundary,\r\n      currentGuess\r\n    );\r\n    setCurrentGuess(newRndNumber);\r\n  };\r\n  return (\r\n    <View style={styles.screen}>\r\n      <Title>Opponent's Guess </Title>\r\n      <NumberContainer>{currentGuess}</NumberContainer>\r\n      <Card>\r\n        <Text>Higher or Lower ?</Text>\r\n        <View style={styles.buttonsContainer}>\r\n          <View style={styles.buttonContainer}>\r\n            <PrimaryButton onPress={nextGuessHandler.bind(this, \"lower\")}>\r\n              <AntDesign name=\"minuscircleo\" size={24} color=\"black\" />\r\n            </PrimaryButton>\r\n          </View>\r\n          <View style={styles.buttonContainer}>\r\n            <PrimaryButton onPress={nextGuessHandler.bind(this, \"greater\")}>\r\n              <AntDesign name=\"pluscircleo\" size={24} color=\"black\" />{\" \"}\r\n            </PrimaryButton>\r\n          </View>\r\n        </View>\r\n      </Card>\r\n    </View>\r\n  );\r\n};\r\n\r\nexport default GameScreen;\r\n\r\nconst styles = StyleSheet.create({\r\n  screen: {\r\n    flex: 1,\r\n    padding: 24,\r\n  },\r\n  buttonsContainer: {\r\n    flexDirection: \"row\",\r\n  },\r\n  buttonContainer: {\r\n    flex: 1,\r\n  },\r\n});\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}